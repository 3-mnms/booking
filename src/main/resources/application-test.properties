myboot.name=Test Env

#log level
logging.level.root=INFO
logging.level.c.mnms.booking.config.RedisConfig=INFO
#logging.level.com.basic.myspringboot=debug

# H2 Database 설정
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# JPA 설정
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update

# H2 Console 사용 설정
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# redis 설정 - 로컬 설정 data
spring.redis.host=127.0.0.1
spring.redis.port=6379
#spring.redis.password=your_password

# 가예매 TTL
temp-reservation.ttl-minutes=1

# kafka
app.kafka.topic.booking-event=booking-events
app.kafka.topic.user-event= user-events
app.kafka.topic.payment-event= payment-status-events

spring.kafka.bootstrap-servers=${KAFKA_SERVERS}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.properties.spring.json.value.default.type=com.mnms.booking.kafka.BookingEventListener$UserEventDTO
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.use.type.headers=false

# kafka 사용 X
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration

# jwt
jwt.public-pem-path=classpath:keys/public.pem
jwt.issuer=festival-user-service

spring.config.import=optional:file:.env[.properties]

# swagger
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.override-with-generic-response=false

# user api
user.service.url=${USER_INFO_API}
booking.user.servicel.url=${BOOKING_USER_INFO_API}

management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=always
management.metrics.tags.application=${spring.application.name:booking-service}