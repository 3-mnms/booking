myboot.name=Dev Env

# ===== ì´ë¦(ë©í¸ë¦­ application ë¼ë²¨) =====
spring.application.name=booking

# ===== ë¡ê·¸ =====
logging.level.root=INFO
logging.level.org.springframework.security=DEBUG
logging.level.com.mnms.booking.service=DEBUG

# ===== DB =====
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driverClassName=org.mariadb.jdbc.Driver

# ===== JPA =====
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect

# ===== Redis =====
spring.data.redis.host=${SERVER_URL}
spring.data.redis.port=${REDIS_PORT}

# ===== Kafka =====
spring.kafka.bootstrap-servers=${KAFKA_SERVERS}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.use.type.headers=false
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Topic
app.kafka.topic.festival-event=festival-topic
app.kafka.topic.payment-event=payment-status-events
app.kafka.topic.payment-cancel-event=payment-cancel-events
app.kafka.topic.transfer-payment-event=payment-transfer-status-events

# ===== JWT =====
jwt.public-pem-path=classpath:keys/public.pem
jwt.issuer=festival-user-service

# ===== ì¸ë¶ ì¤ì /URL =====
spring.config.import=optional:file:.env[.properties]

# Base API (ê²ì´í¸ì¨ì´ ê¸°ë³¸ê° ì ê³µ)
base.service.url=${BASE_API:http://localhost:10000}

# user API (ë´ë¶ DNS ê¸°ë³¸ê° ì ê³µ)
user.service.email.url=${USER_EMAIL_INFO_API}
user.service.stats.url=${USER_STATS_LIST_API}
user.service.booking.url=${BOOKING_USER_INFO_API}

# ===== Mail =====
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
spring.mail.default-encoding=UTF-8

# ===== Swagger =====
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.override-with-generic-response=false

# ===== Actuator/Prometheus & ë©í¸ë¦­ íì¤í ê·¸ë¨ =====
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.metrics.tags.application=${spring.application.name}

# HTTP ìë² ì§ì° íì¤í ê·¸ë¨(p95 ê³ì°ì©)
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# Hikari ì»¤ë¥ì íë ì§ì° íì¤í ê·¸ë¨(p95)
management.metrics.distribution.percentiles-histogram.hikaricp.connections.acquire=true
management.metrics.distribution.sla.hikaricp.connections.acquire=5ms,10ms,20ms,50ms,100ms,200ms,500ms

# Tomcat ë©í¸ë¦­(MBean) íì±í(ì¤ë ë, ì»¤ë¥ì ë±)
server.tomcat.mbeanregistry.enabled=true